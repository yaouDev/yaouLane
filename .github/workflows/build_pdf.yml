name: Build Manual PDF

on:
  workflow_dispatch: # manual trigger

jobs:
  build_pdf:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 

      - name: Get current date and run number for versioning
        id: version_info
        run: |
          echo "CURRENT_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV
          echo "RUN_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV # used to get unique output everytime a manual is generated
          echo "Generated version prefix: ${{ env.CURRENT_DATE }}-${{ env.RUN_NUMBER }}"

      - name: Install Pandoc and LaTeX
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc texlive-latex-extra texlive-fonts-recommended

      - name: Get list of Markdown files in desired order
        id: markdown_files_list
        run: |
          FILE_LIST=$(find documentation/docs -name "*.md" | sort | tr '\n' ' ') # convert newlines to spaces so pandoc can read them as args
          echo "Found Markdown files for PDF compilation: $FILE_LIST"
          echo "file_list=$FILE_LIST" >> $GITHUB_OUTPUT

      - name: Compile PDF with Pandoc
        run: |
          OUTPUT_FILENAME="documentation/versions/${{ env.CURRENT_DATE }}-version-${{ env.RUN_NUMBER }}-manual.pdf"
          echo "Compiling PDF as: $OUTPUT_FILENAME"
        
          pandoc \
            --from markdown \
            --to pdf \
            --output "$OUTPUT_FILENAME" \
            --table-of-contents \
            --toc-depth=3 \
            --number-sections \
            --template=./documentation/templates/template.tex \
            --variable=date:"${{ env.CURRENT_DATE }}" \
            ${{ steps.markdown_files_list.outputs.file_list }} # the markdown documents found in previous step

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: manual-pdf-${{ env.CURRENT_DATE }}-version-${{ env.RUN_NUMBER }}
          path: documentation/versions/${{ env.CURRENT_DATE }}-version-${{ env.RUN_NUMBER }}-manual.pdf

      - name: Configure Git User (Bot)
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"

      - name: Commit and Push PDF to Repository
        run: |
          PDF_FILE="documentation/versions/${{ env.CURRENT_DATE }}-version-${{ env.RUN_NUMBER }}-manual.pdf"
          git add "$PDF_FILE"
          if git diff --cached --exit-code; then # check for changes
            echo "No new PDF changes to commit."
          else
            git commit -m "feat(manual): Add manual ${{ env.CURRENT_DATE }}-version-${{ env.RUN_NUMBER }} [skip ci]" # IMPORTANT!! do not remove skip ci or it will loop forever
            git push origin ${{ github.ref_name }} # this could be a different branch to avoid errors
            echo "Successfully pushed $PDF_FILE to the repository."
          fi
